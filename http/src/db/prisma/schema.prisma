generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  MODERATOR
  ADMIN
}

enum ForumRole {
  MEMBER
  MODERATOR
  ADMIN
}

enum ProjectTagStatus {
  PUBLISHED
  IN_REVIEW
  DRAFT
  COMPLETED
  ONGOING
}

model User {
  id         Int             @id @default(autoincrement())
  username   String          @unique
  firstName  String
  lastName   String
  email      String          @unique
  password   String
  role       Role            @default(USER)
  xp         Int             @default(0)
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  ownedForums Forum[]        @relation("ForumAdmin")
  memberships ForumMember[]
  posts      Post[]
  chats      Chat[]
  resources  Resource[]
  githubUsername  String?         @unique
  githubProfileUrl String?
  githubAvatarUrl String?
  githubAccessToken String?
  techStack       String[]        @default([])
  projects        ProjectUser[]
  curatedTags     ProjectTag[]
  votes           Vote[]
  Sessions        Session[]
}

model Project {
  id               String   @id 
  name             String
  description      String?
  problemStatement String?
  githubUrl        String?  @unique
  demoUrl          String?
  techStack        String[]
  imageUrl         String?
  status           String
  projectType      String
  department       String?
  club             String?
  keyFeatures      String[]
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  pendingUsers     PendingProjectUser[]
  projectImages    ProjectImage[]
  resources        ProjectResource[]
  tags             ProjectTag[]
  users            ProjectUser[]
  votes            Vote[]
}

model ProjectUser {
  id        String  @id @default(uuid())
  userId    Int
  projectId String
  role      String
  project   Project @relation(fields: [projectId], references: [id])
  user      User    @relation(fields: [userId], references: [id])

  @@unique([userId, projectId])
}

model Event {
  id          String    @id @default(cuid())
  title       String
  avatar      String
  date        String
  link        String
  description String
  category    String
  poster      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
}

model Forum {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  description String
  isPrivate   Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  adminId     Int
  admin       User          @relation("ForumAdmin", fields: [adminId], references: [id], onDelete: Cascade)
  members     ForumMember[]
  posts       Post[]
  resources   Resource[]
  chats       Chat[]
  Sessions    Session[]
}

model ForumMember {
  id        Int       @id @default(autoincrement())
  userId    Int
  forumId   Int
  role      ForumRole @default(MEMBER)
  joinedAt  DateTime  @default(now())  
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  forum     Forum     @relation(fields: [forumId], references: [id], onDelete: Cascade)

  @@unique([userId, forumId])
}

model Post {
  id          Int      @id @default(autoincrement())
  title       String
  content     String   @db.Text
  imageUrl    String?
  tags        String[]
  votes       Int      @default(0)
  authorId    Int
  forumId     Int
  category    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt  
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  forum       Forum    @relation(fields: [forumId], references: [id], onDelete: Cascade)
}

model Chat {
  id        Int      @id @default(autoincrement())
  message   String   @db.Text
  votes     Int      @default(0)
  authorId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  forumId   Int
  
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  forum     Forum    @relation(fields: [forumId], references: [id], onDelete: Cascade)
}

model Resource {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  type        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  resourceUrl String
  authorId    Int  
  forumId     Int
  forum       Forum     @relation(fields: [forumId], references: [id], onDelete: Cascade)
  author      User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Session {
  id          Int   @id @default(autoincrement())
  title       String
  description String
  category    String
  joiningLink String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  forumId     Int
  userId      Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  forum       Forum    @relation(fields: [forumId], references: [id], onDelete: Cascade)
}
model ProjectTag {
  id          String            @id @default(uuid())
  name        String
  title       String?
  status      ProjectTagStatus?
  conference  String?
  date        DateTime?
  competition String?
  projectId   String
  curatorId   Int
  createdAt   DateTime         @default(now())
  curator     User             @relation(fields: [curatorId], references: [id])
  project     Project          @relation(fields: [projectId], references: [id])

  @@unique([projectId, name])
  @@index([curatorId])
}

model PendingProjectUser {
  id             String  @id @default(uuid())
  githubUsername String
  projectId      String
  role           String
  project        Project @relation(fields: [projectId], references: [id])

  @@unique([githubUsername, projectId])
}

model ProjectImage {
  id          String   @id @default(uuid())
  title       String
  description String
  url         String
  projectId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  project     Project  @relation(fields: [projectId], references: [id])

  @@index([projectId])
}

model ProjectResource {
  id          String   @id @default(uuid())
  title       String
  description String
  url         String
  type        String
  projectId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  project     Project  @relation(fields: [projectId], references: [id])

  @@index([projectId])
}

model Vote {
  id        String   @id @default(cuid())
  projectId String
  userEmail String
  userId    Int
  createdAt DateTime @default(now())
  project   Project  @relation(fields: [projectId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([projectId, userEmail])
  @@unique([projectId, userId])
}

model VotingStatus {
  id        String    @id @default("voting_status")
  isOpen    Boolean   @default(false)
  startTime DateTime?
  endTime   DateTime?
  updatedAt DateTime  @updatedAt
}

model Counter {
  id    String @id @default("project_counter")
  count Int    @default(0)
}