generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  MODERATOR
  ADMIN
}

enum ForumRole {
  MEMBER
  MODERATOR
  ADMIN
}

model User {
  id         Int             @id @default(autoincrement())
  username   String          @unique
  firstName  String
  lastName   String
  email      String          @unique
  password   String
  role       Role            @default(USER)
  xp         Int             @default(0)
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  
  // Forum relationships
  ownedForums Forum[]        @relation("ForumAdmin")
  memberships ForumMember[]
  
  // Other relationships
  posts      Post[]
  chats      Chat[]
}

model Forum {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  description String
  isPrivate   Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  // Admin relationship
  adminId     Int
  admin       User          @relation("ForumAdmin", fields: [adminId], references: [id], onDelete: Cascade)
  
  // Members relationship
  members     ForumMember[]
  
  // Posts in the forum
  posts       Post[]
}

model ForumMember {
  id        Int       @id @default(autoincrement())
  userId    Int
  forumId   Int
  role      ForumRole @default(MEMBER)
  joinedAt  DateTime  @default(now())
  
  // Relationships
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  forum     Forum     @relation(fields: [forumId], references: [id], onDelete: Cascade)

  @@unique([userId, forumId])
}

model Post {
  id          Int      @id @default(autoincrement())
  title       String
  content     String   @db.Text
  imageUrl    String?
  tags        String[]
  votes       Int      @default(0)
  authorId    Int
  forumId     Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relationships
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  forum       Forum    @relation(fields: [forumId], references: [id], onDelete: Cascade)
}

model Chat {
  id        Int      @id @default(autoincrement())
  message   String   @db.Text
  votes     Int      @default(0)
  authorId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationship
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
}